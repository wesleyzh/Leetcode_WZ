'''
A positive integer N is given. The goal is to construct the shortest possible sequence of integers ending with N, using the following rules:
the first element of the sequence is 1; more specifically: A[0] = 1,
each of the following elements is generated by multiplying the previous element by 2 or increasing it by 1; more precisely: A = A[i−1] * 2 or A = A[i−1] + 1, for i ≥ 1.
For example, for N = 17, the shortest sequence is:
  A[0] = 1
  A[1] = 2
  A[2] = 4
  A[3] = 8
  A[4] = 16
  A[5] = 17
Write a function:
class Solution { public int solution(int N); }
that, given a positive integer N, returns the length of the shortest possible sequence of integers satisfying the above conditions and ending with N.
For example, given N = 17, the function should return 6, as explained above.
Assume that:.
N is an integer within the range [1..2,147,483,647].
Complexity:
expected worst-case time complexity is O(log(N));
expected worst-case space complexity is O(1).. 1po
'''

class Solution:
    
    #parameter N, a positive integer
    def shortest_sequence(self, N):
        
        result = [N] #finally contains the shortest sequence
        
        flag = True
        while(flag):
            
            temp = N%2
            
            if N == 1:
                break
                
            if temp == 0:
                N = N/2
                result.insert(0, N)
            elif temp == 1:
                N = N - 1
                result.insert(0, N)
                
        return result
    
n = 17

solution = Solution()
print solution.shortest_sequence(n)